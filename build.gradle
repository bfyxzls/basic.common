buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenLocal()
        maven {
            name "aliyun1"
            url 'http://maven.aliyun.com/nexus/content/groups/public'
        }
        maven {
            name "aliyun2"
            url 'http://maven.aliyun.com/mvn/repository/'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }

    ext {
        springCloudVersion = 'Finchley.SR1'
    }
}
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'idea'
dependencies {
    compile(project(":basic-redis"))
    compile(project(":basic-mongodb"))
}
//所有项目的task
allprojects {
    group = "com.lind"
    version = qualifyVersionIfNecessary(version)

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'idea'
    compileJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
    }

    compileTestJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
        options.compilerArgs += "-parameters"
    }


    repositories {
        mavenLocal()
        maven {
            name "aliyun1"
            url 'http://maven.aliyun.com/nexus/content/groups/public'
        }
        maven {
            name "aliyun2"
            url 'http://maven.aliyun.com/mvn/repository/'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        compile(
                'org.springframework.boot:spring-boot-starter-web',
                'com.google.collections:google-collections:1.0-rc2',//集合扩展类库
                'com.alibaba:fastjson:1.2.35',//json序列化
                'com.google.guava:guava:24.1-jre',//guava扩展方法类库
                'org.apache.commons:commons-lang3:3.5',
        )


        runtime 'mysql:mysql-connector-java:5.1.44'
        compileOnly('org.projectlombok:lombok')
        testCompileOnly('org.projectlombok:lombok')
        testCompile(
                'org.springframework.boot:spring-boot-starter-test',
                'org.springframework.boot:spring-boot-starter-data-jpa')
    }

    wrapper {
        doLast() {
            def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m" //MaxMetaspaceSize设置元空间的最大值,Xmx堆空间最大值
            def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m" //设置JVM堆的最大大小
            File wrapperFile = file("gradlew")
            wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
                    "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
            File wrapperBatFile = file("gradlew.bat")
            wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
                    "set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
        }
    }

}

//子任务task
subprojects {}

bootJar.enabled = false // 不要求启动项目，不需要main方法
jar.enabled = true // 需要在build/libs下生成jar文件

apply plugin: "maven-publish"
task sourceJar(type: Jar) {
    // main程序代码会打包，而test模型不会被打进包里
    from sourceSets.main.allJava
}
publishing {
    publications {
        maven(MavenPublication) {
            //打包源码和class
            from components.java    //发布java组件
            //定义源码task,这个与classifier "sources"对应
            //artifact sourceJar
        }
    }

    //定义目标仓库 (包所存放的地方)
    repositories {
        // 本地仓库
        mavenLocal()

        // 远程仓库
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url = "https://repo.rdc.aliyun.com/repository/44454-snapshot-Ejfhso"
            } else {
                url = "https://repo.rdc.aliyun.com/repository/44454-release-3afmGw"
            }
            credentials {
                username 'fTMcrA'
                password 'uCQE7YXL3d'
            }
        }
    }
}

/*
 * Support publication of artifacts versioned by topic branch.
 * CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
 * If <TOPIC> starts with 'SPR-', change version
 *     from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
 *     e.g. 3.2.1.BUILD-SNAPSHOT => 3.2.1.SPR-1234-SNAPSHOT
 */

def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("SPR-")) {
            return version.replace("BUILD", qualifier)
        }
    }
    return version
}
